Vectors is 0-indexed . 

 vector<int>v ;                                             // syntax of a v vector storing int values 
 v.push_back(8);                                           // insert 8 in O(1) 
 v.emplace_back(5);                                       // emplace back is faster than push back 
 v.size();                                               // return size of v in O(1) 
 v[1]   or   v.at(1)  ;                                 // returns element in 1st index in v in O(1)   
vector<int>u(v) ;                                      // u vector is copy of v 
v.swap(w) ;                                           // swap vectors v and w 
v.erase(v.begin()+3,v.begin()+5 ;                    // deletion of fourth element of v 
v.pop_back() ;                                      // pop out last element of v 
v.clear();                                         // erases entire vector v 
v.insert(v.begin(),9) ;                           // insert 9 at v[0]
v.insert(v.begin()+3,3,2)                        // insert 2 on v[3] , v[4] , v[5] 
vector<int>v(4,6);                              // v= {6,6,6,6} 
vector<int>v(4);                               // v= {0,0,0,0} 
v.back();                                     // points to last element 




// retrieval using iterators 

vector<int> :: iterator i = v.begin();     // v.begin() points to memeory accessed by *v.begin() 
i++ ;    // going to second stored element 
i+=2 ; // fourth from second 
 cout<< *(i) ;  printed 


vector<int> :: iterator i = v.end();                    // point to location after last ellement 
vector<int> :: iterator i = v.rend();                  // points to location just before first element 
vector<int> :: iterator i = v.rbegin();               // points to last element 



// to print entire vector 
for(vector<int> :: iterator i = v,.begin(); i!=v.end(); i++) { cout<<*(i); } 
or 
for auto i = v.begin(); i!=v.end(); i++{  cout<<*(i); } 
or 
for(auto i: v) {cout<<*(i); } 



